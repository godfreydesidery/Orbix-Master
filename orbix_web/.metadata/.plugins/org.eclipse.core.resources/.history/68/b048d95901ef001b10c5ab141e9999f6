/**
 * 
 */
package com.example.orbix_web.controllers;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.orbix_web.exceptions.NotFoundException;
import com.example.orbix_web.exceptions.ResourceNotFoundException;
import com.example.orbix_web.models.Supplier;
import com.example.orbix_web.models.Till;
import com.example.orbix_web.models.User;
import com.example.orbix_web.repositories.TillRepository;

/**
 * @author GODFREY
 *
 */
@RestController
@Service
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class TillServiceController {

    @Autowired
    TillRepository tillRepository;
    
    /**
     * @param userId
     * @return
     */
    @RequestMapping(method = RequestMethod.GET, value = "/tills", produces=MediaType.APPLICATION_JSON_VALUE)
    public List<Till> getAllTills(@RequestHeader("user_id") Long userId) {
        return tillRepository.findAll();
    }
    
    /**
     * Get till by id
     */
    @RequestMapping(method = RequestMethod.GET, value = "/tills/get_by_id", produces=MediaType.APPLICATION_JSON_VALUE)
    public Till getTillById(@RequestParam(name = "id") Long id, @RequestHeader("user_id") Long userId) {
        return tillRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("Supplier not found"));
    }
    
    /**
     * Get till by no
     */
    
    /**
     * Get till by name
     */
    
    /**
     * Get till by computer name
     */
    
    /**
     * Create a new till
     */
    
    /**
     * Update an existing till
     */
    
    /**
     * Activate or deactivate a till
     */
    
    /**
     * Delete a till
     */
    
    /**
     * Get status of a till
     */
    
}
