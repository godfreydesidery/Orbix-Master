/**
 * 
 */
package com.example.orbix_web.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.orbix_web.exceptions.NotFoundException;
import com.example.orbix_web.models.CorporateCustomer;
import com.example.orbix_web.models.Supplier;
import com.example.orbix_web.repositories.CorporateCustomerRepository;

/**
 * @author GODFREY
 *
 */
@RestController
@Service
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class CorporateCustomerServiceController {
	@Autowired
	CorporateCustomerRepository corporateCustomerRepository;
	
	/**
	 * Get all customers
	 * @return
	 */
	@RequestMapping(method = RequestMethod.GET, value = "/corporate_customers", produces=MediaType.APPLICATION_JSON_VALUE)
    public List<CorporateCustomer> getAllCorporateCustomers() {
        return corporateCustomerRepository.findAll();
    }
	
	/**
	 * Get a single customer by id
	 * @param id
	 * @return
	 */
	@RequestMapping(method = RequestMethod.GET, value = "/corporate_customers/get_by_id", produces=MediaType.APPLICATION_JSON_VALUE)
    public CorporateCustomer getCorporateCustomerById(@RequestParam(name = "id") Long id) {
        return corporateCustomerRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("Customer not found"));
    }
	
	@RequestMapping(method = RequestMethod.GET, value = "/corporate_customers/get_by_no", produces=MediaType.APPLICATION_JSON_VALUE)
    public CorporateCustomer getCorporateCustomerByNo(@RequestParam(name = "no") String no) {
        return corporateCustomerRepository.findByNo(no)
                .orElseThrow(() -> new NotFoundException("Customer not found"));
    }
	
	/**
	 * Get a single customer by no
	 */
	
	/**
	 * Create a new customer
	 */
	
	/**
	 * Update a customer by id
	 */
	
	/**
	 * Delete a customer
	 */
}
