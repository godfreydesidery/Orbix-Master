/**
 * 
 */
package com.example.orbix_web.controllers;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.orbix_web.exceptions.MissingInformationException;
import com.example.orbix_web.exceptions.NotFoundException;
import com.example.orbix_web.exceptions.ResourceNotFoundException;
import com.example.orbix_web.models.Clas;
import com.example.orbix_web.models.Department;
import com.example.orbix_web.models.SubClass;
import com.example.orbix_web.repositories.ClasRepository;
import com.example.orbix_web.repositories.DepartmentRepository;
import com.example.orbix_web.repositories.SubClassRepository;

/**
 * @author GODFREY
 *
 */
@RestController
@Service
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class SubClassServiceController {
	
	@Autowired
    SubClassRepository subClassRepository;
	@Autowired
    ClasRepository clasRepository;
    @Autowired
    DepartmentRepository departmentRepository;
    
    // Get All Classes
    @GetMapping("/sub_classes")
    public List<SubClass> getAllSubClasses() {
        return subClassRepository.findAll();
    }
	
	
	// Get All Classes
    @RequestMapping(method = RequestMethod.GET, value = "/sub_classes/class_name={class_name}", produces=MediaType.APPLICATION_JSON_VALUE)
    public List<SubClass> getAllClassSubClasses(@PathVariable(value = "class_name") String class_name) {
    	Clas class_ = null;
    	try {
    		class_ = clasRepository
    				.findByName(class_name)
    				.get();
    		
    	}catch(Exception e) {
    		throw new NotFoundException("The "+class_name+" class does not exist");
    	}
        return subClassRepository.findByClas(class_);
    }
 // Get All Classes
    @RequestMapping(method = RequestMethod.GET, value = "/sub_classes/{id}")
    public SubClass getAllClassSubClassesbyId(@PathVariable(value = "id") Long id) {
    	
        return subClassRepository.findById(id).get();
    }
    
    
    
 // Get All Classes
    @GetMapping("/classes")
    public List<Clas> getAllClasses() {
        return clasRepository.findAll();
    }
    // Get All Classes
    @RequestMapping(method = RequestMethod.GET, value = "/sub_classes/class_name={class_name}", produces=MediaType.APPLICATION_JSON_VALUE)
    public List<SubClass> getAllClassesSubClasses(@PathVariable(value = "class_name") String class_name) {
    	Clas clas = null;
    	try {
    		clas = clasRepository
    				.findByName(class_name)
    				.get();
    		
    	}catch(Exception e) {
    		throw new NotFoundException("The "+class_name+" class does not exist");
    	}
    	
        return subClassRepository.findByClas(clas);
    }
    
    
    
    /**
     * 
     * @return array of classes' names
     */
    @GetMapping(value="/classes/class_names")
    public Iterable<Clas> getAllClassByNames() {
        return clasRepository.getNames();
    }
    
    @RequestMapping(method = RequestMethod.GET, value = "/sub_classes/id={id}", produces=MediaType.APPLICATION_JSON_VALUE)
    @Transactional
    public SubClass getById(@PathVariable(value = "id") Long id) {
        return subClassRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("Sub-Class not found"));
    }
    
    @RequestMapping(method = RequestMethod.GET, value = "/classes/name={name}", produces=MediaType.APPLICATION_JSON_VALUE)
    @Transactional
    public Clas getByName(@PathVariable(value = "name") String name) {
        return clasRepository.findByName(name)
                .orElseThrow(() -> new NotFoundException("Resource not found"));
    }
    
    @RequestMapping(method = RequestMethod.POST, value="/sub_classes/new", produces=MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public SubClass createSubClass(@Valid @RequestBody SubClass subClass ) throws Exception {
    	
    	Department department = departmentRepository.findByName(subClass.getDepartment().getName())
                .orElseThrow(() -> new NotFoundException("Department not found"));
    	departmentRepository.save(department);
		Clas clas = clasRepository.findByName(subClass.getClas().getName())
                .orElseThrow(() -> new NotFoundException("Class not found"));
		clasRepository.save(clas);
		
		subClass.setDepartment(department);
		subClass.setClas(clas);
    	
    	return subClassRepository.saveAndFlush(subClass);  	
    }
    
    @RequestMapping(method = RequestMethod.PUT, value="/sub_classes/edit/{id}", produces=MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public SubClass updateSubClass(@PathVariable(value = "id") Long id,
            								@Valid @RequestBody SubClass subClassDetails ) throws Exception {
    	SubClass subClass =subClassRepository.findById(id)
    			.orElseThrow(() -> new NotFoundException("Sub-class not found"));
    	subClass = subClassDetails;
    	
    	Department department = departmentRepository.findByName(subClassDetails.getDepartment().getName())
                .orElseThrow(() -> new NotFoundException("Department not found"));
    	departmentRepository.save(department);
		Clas clas = clasRepository.findByName(subClassDetails.getClas().getName())
                .orElseThrow(() -> new NotFoundException("Class not found"));
		clasRepository.save(clas);
		
		subClass.setDepartment(department);
		subClass.setClas(clas);
    	return subClassRepository.saveAndFlush(subClass);
    }
    
    // Get a Single Class by class name
    @GetMapping("/classes/class_name={class_name}")
    public Clas getClassByClassName(@PathVariable(value = "class_name") String clasName) {
    	
        return clasRepository.findByName(clasName)
                .orElseThrow(() -> new ResourceNotFoundException("Class", "class_name", clasName));
    }
   

    
    
 // Create a new Class
    @RequestMapping(method = RequestMethod.POST, value="/sub_classes")
    @ResponseBody
    public SubClass createSubClass(@Valid @RequestBody SubClass subClas) {
    	
    	Department department;
    	System.out.println((subClas.getDepartment()).getName().toString());
    	try {
    		String departmentName = subClas.getDepartment().getName();
    		department = departmentRepository.findByName(departmentName).get();
	    	departmentRepository.save(department);
	    	subClas.setDepartment(department);
    	}catch(Exception e) {
    		throw new MissingInformationException("Department required");
    	}
    	Clas clas;
    	System.out.println(subClas.getClas().getName());
    	try {
    		String clasName = subClas.getClas().getName();
    		clas = clasRepository.findByName(clasName).get();
	    	clasRepository.save(clas);
	    	subClas.setClas(clas);
    	}catch(Exception e) {
    		throw new MissingInformationException("Class required");
    	}
    	
        return subClassRepository.save(subClas);
    }
    
 // Delete a Department
    @DeleteMapping("/sub_classes/{id}")
    public ResponseEntity<?> deleteClass(@PathVariable(value = "id") Long subClassId) {
    	SubClass subClass = subClassRepository.findById(subClassId)
                .orElseThrow(() -> new ResourceNotFoundException("Sub Class", "id", subClassId));

    	subClassRepository.delete(subClass);

        return ResponseEntity.ok().build();
    }

}
