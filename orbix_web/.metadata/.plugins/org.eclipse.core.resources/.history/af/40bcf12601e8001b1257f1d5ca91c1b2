/**
 * 
 */
package com.example.orbix_web.controllers;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.orbix_web.exceptions.InvalidOperationException;
import com.example.orbix_web.exceptions.ResourceNotFoundException;
import com.example.orbix_web.models.Item;
import com.example.orbix_web.models.Role;
import com.example.orbix_web.repositories.RoleRepository;

/**
 * @author GODFREY
 *
 */
@RestController
@Service
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class RoleServiceController {

    @Autowired
    RoleRepository roleRepository;
    
    // Get All Roles
    @RequestMapping(method = RequestMethod.GET, value = "/roles", produces=MediaType.APPLICATION_JSON_VALUE)
    public List<Role> getAllRoles() {
        return roleRepository.findAll();
    }

    // Create a new Role
    @RequestMapping(method = RequestMethod.POST, value = "/roles/new", produces=MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Role createRole(@Valid @RequestBody Role role) {
        return roleRepository.save(role);
    }

    // Get a Single Role
    @GetMapping("/roles/{id}")
    @RequestMapping(method = RequestMethod.GET, value = "/roles/{id}", produces=MediaType.APPLICATION_JSON_VALUE)
    public Role getRoleById(@PathVariable(value = "id") Long roleId) {
        return roleRepository.findById(roleId)
                .orElseThrow(() -> new ResourceNotFoundException("Role", "id", roleId));
    }   
    /**
     * 
     * @return array of roles' names
     */
    @RequestMapping(method = RequestMethod.GET, value = "/roles/role_names", produces=MediaType.APPLICATION_JSON_VALUE)
    public Iterable<Role> getAllRolesByNames() {	
        return roleRepository.getName();
    }    
   
    // Get a Single Role by name
    @RequestMapping(method = RequestMethod.GET, value = "/roles/name={name}", produces=MediaType.APPLICATION_JSON_VALUE)
    public Role getRoleByRoleName(@PathVariable(value = "name") String roleName) {
        return roleRepository.findByName(roleName)
                .orElseThrow(() -> new ResourceNotFoundException("Role", "rolename", roleName));
    }

    // Update a Role
    @RequestMapping(method = RequestMethod.PUT, value = "/roles/edit/{id}", produces=MediaType.APPLICATION_JSON_VALUE)
    public Role updateRole(@PathVariable(value = "id") Long id,
                                            @Valid @RequestBody Role roleDetails) {
        Role role = roleRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Role", "id", id));
        if(role.getName().equals("ADMIN")) {
        	throw new InvalidOperationException("Editing the ADMIN role is not allowed");
        }
        role = roleDetails;
        return  roleRepository.saveAndFlush(role);
    }

    // Delete a Role
    @RequestMapping(method = RequestMethod.DELETE, value = "/roles/delete/id={id}")
    public ResponseEntity<Object> deleteRole(@PathVariable(value = "id") Long roleId) {
    	Role role = roleRepository.findById(roleId)
                .orElseThrow(() -> new ResourceNotFoundException("Role", "id", roleId));
    	System.out.println("deleting");
    	if(role.getName().equals("ADMIN")) {
        	//throw new InvalidOperationException("Deleting the ADMIN role is not allowed");
    		return new ResponseEntity<>("Deleting the ADMIN role is not allowed", HttpStatus.EXPECTATION_FAILED);
        }
    	roleRepository.delete(role);
        //return "Role successifuly deleted";
    	return new ResponseEntity<>("Deleted", HttpStatus.OK);
    }
}
